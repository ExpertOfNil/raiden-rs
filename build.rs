use std::io::Write;

fn main() {
    let shader_dir = std::path::Path::new(env!("CARGO_MANIFEST_DIR")).join("assets/shaders");
    //let mut output = std::fs::File::create("src/shaders.rs");
    let mut output = String::new();

    let indent = " ".repeat(4);
    output.push_str("// Auto-generated by build.rs - DO NOT edit manually\n\n");
    output.push_str("/// Return the WGSL source for a shader by filename.\n");
    output.push_str("/// Panics if the shader is not found.\n");
    output.push_str("pub fn get(fname: &str) -> &'static str {\n");
    output.push_str(&format!("{indent}match fname {{\n"));
    for entry in std::fs::read_dir(shader_dir.clone()).unwrap() {
        let path = entry.unwrap().path();
        if path.extension().and_then(|s| s.to_str()) == Some("wgsl") {
            let filename = path.file_name().unwrap().to_str().unwrap();
            output.push_str(&format!(
                "{indent}{indent}\"{filename}\" => include_str!(\"{}/{filename}\"),\n",
                shader_dir.to_str().unwrap()
            ));
        }
    }
    output.push_str(&format!(
        "{indent}{indent}_ => panic!(\"{{}} not found in {}.\", fname),\n",
        shader_dir.to_str().unwrap()
    ));

    output.push_str("    }\n");
    output.push_str("}\n");

    std::fs::write("src/shaders.rs", output).unwrap();
}
